<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>code-runner插件快速更改python解释器</title>
    <link href="/posts/a95d65d2/"/>
    <url>/posts/a95d65d2/</url>
    
    <content type="html"><![CDATA[<p>因为我个人使用 conda 来管理虚拟环境，有的时候用不同环境下的解释器去运行 python 脚本。<br>我们都知道更改 code-runner 插件里的<code>code-runner.executorMap</code>这个选项中的<code>python</code>的路径就可以更换不同的解释器，但是来回手改实在是麻烦。</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn/imgbed/20201215173310.png"></p><p>经过网上查了查资料<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="VS code 中 Code Runner 插件的 Python 路径配置方法 | TechNest">[1]</span></a></sup>，发现这样改就行了~<br>首先得安装 python 的插件，我相信大家都有~</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn/imgbed/20201215174907.webp"></p><p>安装这个插件之后，我们打开一个 py 文件时，左下角会显示当前的解释器，点击也可以进行选择。</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn/imgbed/20201215175116.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn/imgbed/20201215175229.webp"></p><p>当我们选择了一个解释器后，根目录会出现一个<code>.vscode</code>文件夹，里面有一个<code>settings.json</code>文件，其中会显示当前所选择的解释器</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn/imgbed/20201215175403.webp"></p><p>此时切换到全局设置，将<code>&quot;code-runner.runInTerminal&quot;</code>改为<code>true</code>，这一步是让 code-runner 在终端输出。</p><p>再将<code>&quot;code-runner.executorMap&quot;</code>中<code>python</code>的值改为<code>&quot;\&quot;$pythonPath\&quot; $fullFileName&quot;</code>，即使用 pythonPath 的值，所以当我们切换解释器的时候，code-runner 所用的解释器也会随之更换。加两个双引号是防止路径中含有空格导致出错。$fullFileName 就是我们当前 py 文件的路径，此时就大功告成了~</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://stella_l.gitee.io/technest/2020/01/06/Python/VS%20code%E4%B8%ADCode%20Runner%E6%8F%92%E4%BB%B6%E7%9A%84Python%E8%B7%AF%E5%BE%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/">VS code 中 Code Runner 插件的 Python 路径配置方法 | TechNest</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>VSCode</tag>
      
      <tag>教程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github+PicGO+JsDelivr实现图床</title>
    <link href="/posts/github-picgo-jsdeliver-imgbed/"/>
    <url>/posts/github-picgo-jsdeliver-imgbed/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>看网上教程用 Hexo + GitHub pages 作为博客后，图床成了下一个问题，本着能白嫖就白嫖的精神，从网上搜了一下图床选择，最终选定为 Github 配合 Jsdelivr 的 CDN 加速</li></ul><h2 id="GitHub-仓库创建"><a href="#GitHub-仓库创建" class="headerlink" title="GitHub 仓库创建"></a>GitHub 仓库创建</h2><ul><li>首先你需要有一个 Github 账号，怎么注册就不用说了吧~</li><li>登陆 GitHub 后，点击右上角的 NEW 创建新的仓库<br><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn/imgbed/20201110191606.png"></li></ul><p>之后进入到创建页面</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn/imgbed/20201110191853.png"></p><p>在这个界面中：</p><p>① 处填写仓库的名称，自己认识就可以了；</p><p>② 处将仓库选为公开的；</p><p>③ 处选择添加一个 readme 占位(其他也可)；</p><p>④ 处，在 2020 年 10 月后，GitHub 将默认分支名称改为了 main，而不是原来的 master，这会导致之后的图片链接里要加上一个@main，想不想改看你心情~</p><h2 id="GitHub-账号-token-获取"><a href="#GitHub-账号-token-获取" class="headerlink" title="GitHub 账号 token 获取"></a>GitHub 账号 token 获取</h2><p>进入账号 setting 界面，选择 Developer settings，然后选择 Personal access tokens，点击生成一个新的 token</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn/imgbed/20201110193711.png"></p><p>Note 处写一点对于这个 token 的描述，免得以后忘了是啥的</p><p>关于权限只选择 repo(仓库)就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn/imgbed/20201110193908.png"></p><p><strong>生成成功的 token 建议复制到别的地方保存一下，你只能看到这个 token 一次！！！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn/imgbed/20201110194134.png"></p><h2 id="PicGO-配置"><a href="#PicGO-配置" class="headerlink" title="PicGO 配置"></a>PicGO 配置</h2><p>打开 PicGO，个人喜欢用 github-plus 这个插件而不是自带的 github 图床，因为这个插件可以同步，你在 picgo 中删除了图片之后，GitHub 仓库中的图片也会删除~</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn/imgbed/20201110194708.png"></p><ul><li><p>repo 处填写你的 GitHub 用户名和刚才创建仓库名，格式为用户名/仓库名</p></li><li><p>branch 处填写你的分支名称，在 2020 年 10 月后，新建的仓库分支名默认为 main，具体填什么请自己去仓库看一眼名字！</p></li><li><p>token 处就是刚才生成的，只出现一次的 token</p></li><li><p>path 处填写你希望保存的路径，例如，你填写了：img/ 那么你上传的照片就会在 仓库/img/ 这个文件夹下</p></li><li><p>customUrl 这里可以填也可以不填，不填默认使用 github 地址，本文使用 Jsdelivr 进行加速，那么这里就要写一点东西了</p><p>注意，如果你的分支名称不是 master 而是别的名字比如 main，那么你的仓库名称后面应该加上@分支名，否则会不能正确访问</p></li></ul><p>即：</p><p>master 分支：<code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code></p><p>其他分支：<code>https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名</code></p><p>​</p><h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2><p>到此应该就没啥问题了- -速度应该也还是不错的~</p>]]></content>
    
    
    
    <tags>
      
      <tag>图床</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
