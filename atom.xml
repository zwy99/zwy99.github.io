<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>珏&#39;s Blog</title>
  
  
  <link href="https://www.zhjue.xyz/atom.xml" rel="self"/>
  
  <link href="https://www.zhjue.xyz/"/>
  <updated>2021-01-12T06:29:19.866Z</updated>
  <id>https://www.zhjue.xyz/</id>
  
  <author>
    <name>珏</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>HPU图书馆API收集整理</title>
    <link href="https://www.zhjue.xyz/posts/hpu-lib-api/"/>
    <id>https://www.zhjue.xyz/posts/hpu-lib-api/</id>
    <published>2020-12-21T12:07:47.000Z</published>
    <updated>2021-01-12T06:29:19.866Z</updated>
    
    <content type="html"><![CDATA[<div class="note note-primary">            <p>代码样例在<br><a class="btn" href="https://github.com/zwy99/hpu-lib-api/blob/master/example.py">这里</a></p>          </div><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>临近考试周，加上新图书馆的装修之豪华，图书馆座位变得越来越来越抢手，经常抢不过别人，所以打事看看能不能用个脚本去抢一下。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>我们学校座位预约可以在 PC 端的图书馆官网，也可以在微信公众号，也可以在一个叫 seat 的软件上。</p><p>PC 端每次登陆都需要验证码，搞不定；然后就用 fiddler 试了试抓包，公众号的话有个东西老是会过期，搞不定，发现 seat 好像简单多了。</p><p>手机使用<code>Packet Capture</code>软件进行抓包。</p><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><h3 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h3><blockquote><p><a href="http://seatlib.hpu.edu.cn/rest/auth">http://seatlib.hpu.edu.cn/rest/auth</a></p></blockquote><p><em>请求方式：GET</em></p><p><strong>url 参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>内容</th><th>必要性</th></tr></thead><tbody><tr><td>username</td><td>str</td><td>学号</td><td>必要</td></tr><tr><td>password</td><td>str</td><td>密码</td><td>必要</td></tr></tbody></table><p><strong>json 回复：</strong></p><table><thead><tr><th>字段</th><th>类型</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>status</td><td>str</td><td>登陆是否成功</td><td>success：成功</td></tr><tr><td>data</td><td>obj</td><td>返回内容</td><td>失败时返回 null</td></tr><tr><td>code</td><td>str</td><td>状态码</td><td>成功时应该时是 0</td></tr><tr><td>message</td><td>str</td><td>信息</td><td>成功时应该是空</td></tr></tbody></table><p><code>data</code>对象：</p><table><thead><tr><th>字段</th><th>类型</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>token</td><td>str</td><td>token</td><td>登陆成功时返回</td></tr></tbody></table><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><blockquote><p><a href="http://seatlib.hpu.edu.cn/rest/v2/user">http://seatlib.hpu.edu.cn/rest/v2/user</a></p></blockquote><p><em>请求方式：GET</em></p><p><strong>url 参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>内容</th><th>必要性</th></tr></thead><tbody><tr><td>token</td><td>str</td><td>token</td><td>必要</td></tr></tbody></table><p><strong>json 回复：</strong></p><table><thead><tr><th>字段</th><th>类型</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>status</td><td>str</td><td>是否成功</td><td>success：成功</td></tr><tr><td>data</td><td>obj</td><td>返回内容</td><td>失败时返回 null</td></tr><tr><td>code</td><td>str</td><td>状态码</td><td>成功时应该时是 0</td></tr><tr><td>message</td><td>str</td><td>信息</td><td>成功时应该是空</td></tr></tbody></table><p><code>data</code>对象：</p><table><thead><tr><th>字段</th><th>类型</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>num</td><td>未知</td><td></td></tr><tr><td>enable</td><td>bool</td><td>未知</td><td></td></tr><tr><td>username</td><td>str</td><td>学号</td><td></td></tr><tr><td>status</td><td>str</td><td>未知</td><td></td></tr><tr><td>lastLogin</td><td>str</td><td>上次登陆时间</td><td></td></tr><tr><td>checkdIn</td><td>bool</td><td>未知(应该是是否签到)</td><td></td></tr><tr><td>violationCount</td><td>num</td><td>违约记录数</td><td></td></tr></tbody></table><h3 id="历史预约记录"><a href="#历史预约记录" class="headerlink" title="历史预约记录"></a>历史预约记录</h3><blockquote><p><a href="http://seatlib.hpu.edu.cn/rest/v2/history/params1/params2">http://seatlib.hpu.edu.cn/rest/v2/history/params1/params2</a></p></blockquote><p><em>请求方式：GET</em></p><p><strong>url 路径：</strong></p><table><thead><tr><th>参数名</th><th>内容</th><th>必要性</th></tr></thead><tbody><tr><td>params1</td><td>第 x 页</td><td>必要</td></tr><tr><td>params2</td><td>每页显示 x 条</td><td>必要</td></tr></tbody></table><blockquote><p>例：<a href="http://seatlib.hpu.edu.cn/rest/v2/history/1/10">http://seatlib.hpu.edu.cn/rest/v2/history/1/10</a><br>以每页十条历史记录，显示第一页</p></blockquote><p><strong>url 参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>内容</th><th>必要性</th></tr></thead><tbody><tr><td>token</td><td>str</td><td>token</td><td>必要</td></tr></tbody></table><p><strong>json 回复：</strong></p><table><thead><tr><th>字段</th><th>类型</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>status</td><td>str</td><td>是否成功</td><td>success：成功</td></tr><tr><td>data</td><td>obj</td><td>返回内容</td><td>失败时返回 null</td></tr><tr><td>code</td><td>str</td><td>状态码</td><td>成功时应该时是 0</td></tr><tr><td>message</td><td>str</td><td>信息</td><td>成功时应该是空</td></tr></tbody></table><p><code>data</code>对象：</p><table><thead><tr><th>字段</th><th>类型</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>reservations</td><td>array</td><td>预约历史记录列表</td><td></td></tr></tbody></table><h3 id="违约记录（这个我不太清楚，我没有违约记录）"><a href="#违约记录（这个我不太清楚，我没有违约记录）" class="headerlink" title="违约记录（这个我不太清楚，我没有违约记录）"></a>违约记录（这个我不太清楚，我没有违约记录）</h3><blockquote><p><a href="http://seatlib.hpu.edu.cn/rest/v2/violations">http://seatlib.hpu.edu.cn/rest/v2/violations</a></p></blockquote><p><em>请求方式：GET</em></p><p><strong>url 参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>内容</th><th>必要性</th></tr></thead><tbody><tr><td>token</td><td>str</td><td>token</td><td>必要</td></tr></tbody></table><p><strong>json 回复：</strong></p><table><thead><tr><th>字段</th><th>类型</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>status</td><td>str</td><td>是否成功</td><td>success：成功</td></tr><tr><td>data</td><td>array</td><td>返回内容</td><td>失败时返回 null</td></tr></tbody></table><p><code>data</code>数组列表：</p><h3 id="当前预约信息"><a href="#当前预约信息" class="headerlink" title="当前预约信息"></a>当前预约信息</h3><blockquote><p><a href="http://seatlib.hpu.edu.cn/rest/v2/user/reservations">http://seatlib.hpu.edu.cn/rest/v2/user/reservations</a></p></blockquote><p><em>请求方式：GET</em></p><p><strong>url 参数：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>内容</th><th>必要性</th></tr></thead><tbody><tr><td>token</td><td>str</td><td>token</td><td>必要</td></tr></tbody></table><p><strong>json 回复：</strong></p><table><thead><tr><th>字段</th><th>类型</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>status</td><td>str</td><td>是否成功</td><td>success：成功</td></tr><tr><td>data</td><td>array</td><td>返回内容</td><td>失败时返回 null</td></tr><tr><td>code</td><td>str</td><td>状态码</td><td>成功时应该时是 0</td></tr><tr><td>message</td><td>str</td><td>信息</td><td>成功时应该是空</td></tr></tbody></table><p><code>data</code>数组中仅含有一个对象，该对象内容：</p><table><thead><tr><th>字段</th><th>类型</th><th>内容</th><th>备注</th></tr></thead><tbody><tr><td>id</td><td>num</td><td>未知</td><td></td></tr><tr><td>receipt</td><td>str</td><td>未知</td><td></td></tr><tr><td>onDate</td><td>str</td><td>预约日期</td><td></td></tr><tr><td>seatID</td><td>num</td><td>座位 ID</td><td></td></tr><tr><td>status</td><td>str</td><td>状态</td><td></td></tr><tr><td>location</td><td>str</td><td>座位详细位置</td><td>如南校区第二图书馆 7 层 7 层北部阅览区，座位号 xxx</td></tr><tr><td>begin</td><td>str</td><td>开始时间</td><td></td></tr><tr><td>end</td><td>str</td><td>结束时间</td><td></td></tr><tr><td>userEnded</td><td>bool</td><td></td><td></td></tr><tr><td>message</td><td>str</td><td>信息</td><td></td></tr></tbody></table><h3 id="预约"><a href="#预约" class="headerlink" title="预约"></a>预约</h3><blockquote><p><a href="http://seatlib.hpu.edu.cn/rest/v2/freeBook">http://seatlib.hpu.edu.cn/rest/v2/freeBook</a></p></blockquote><p><em>请求方式：POST</em></p><p><strong>正文参数（ application/x-www-form-urlencoded ）：</strong></p><table><thead><tr><th>参数名</th><th>类型</th><th>内容</th><th>必要性</th><th>备注</th></tr></thead><tbody><tr><td>token</td><td>str</td><td>token</td><td>必要</td><td>从登陆接口获取</td></tr><tr><td>seat</td><td>num</td><td>座位 ID(seatID)</td><td>必要</td><td>见<a href="https://github.com/zwy99/hpu-lib-api/blob/master/%E6%96%B0%E5%9B%BE%E4%B9%A6%E9%A6%86%E5%BA%A7%E4%BD%8D%E7%BC%96%E5%8F%B7.json">座位 ID 表(只包括新图书馆)</a></td></tr><tr><td>startTime</td><td>str</td><td>起始时间</td><td>必要</td><td>按分钟计算，如上午 9 点为 540，下午 18 点为 1080</td></tr><tr><td>endTime</td><td>str</td><td>结束时间</td><td>必要</td><td>按分钟计算，如上午 9 点为 540，下午 18 点为 1080</td></tr><tr><td>date</td><td>str</td><td>预约日期</td><td>必要</td><td>格式为 1970-01-01</td></tr></tbody></table><h3 id="各个图书馆每个房间空余位置信息-太多了懒得弄"><a href="#各个图书馆每个房间空余位置信息-太多了懒得弄" class="headerlink" title="各个图书馆每个房间空余位置信息(太多了懒得弄)"></a>各个图书馆每个房间空余位置信息(太多了懒得弄)</h3>]]></content>
    
    
    <summary type="html">HPU图书馆API收集与整理</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>code-runner插件快速更改python解释器</title>
    <link href="https://www.zhjue.xyz/posts/a95d65d2/"/>
    <id>https://www.zhjue.xyz/posts/a95d65d2/</id>
    <published>2020-12-15T09:21:08.000Z</published>
    <updated>2020-12-15T09:21:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>因为我个人使用 conda 来管理虚拟环境，有的时候用不同环境下的解释器去运行 python 脚本。我们都知道更改 code-runner 插件里的<code>code-runner.executorMap</code>这个选项中的<code>python</code>的路径就可以更换不同的解释器，但是来回手改实在是麻烦。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn@master/hexo-img/code-runner%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E6%9B%B4%E6%94%B9python%E8%A7%A3%E9%87%8A%E5%99%A8-2020-12-21-13-19-46.webp"></p><ul><li>网上查了查资料<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="VS code 中 Code Runner 插件的 Python 路径配置方法 | TechNest">[1]</span></a></sup>，发现按照下面步骤做就行了~</li></ul><h2 id="安装-python-插件"><a href="#安装-python-插件" class="headerlink" title="安装 python 插件"></a>安装 python 插件</h2><p>首先得安装 python 的插件，我相信大家都有~<br><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn@master/hexo-img/code-runner%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E6%9B%B4%E6%94%B9python%E8%A7%A3%E9%87%8A%E5%99%A8-2020-12-21-13-14-04.webp"></p><p>安装这个插件之后，我们打开一个 py 文件时，左下角会显示当前的解释器，点击也可以进行选择。</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn@master/hexo-img/code-runner%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E6%9B%B4%E6%94%B9python%E8%A7%A3%E9%87%8A%E5%99%A8-2020-12-21-13-14-23.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn@master/hexo-img/code-runner%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E6%9B%B4%E6%94%B9python%E8%A7%A3%E9%87%8A%E5%99%A8-2020-12-21-13-10-53.webp"></p><p>当我们选择了一个解释器后，根目录会出现一个<code>.vscode</code>文件夹，里面有一个<code>settings.json</code>文件，其中会显示当前所选择的解释器</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn@master/hexo-img/code-runner%E6%8F%92%E4%BB%B6%E5%BF%AB%E9%80%9F%E6%9B%B4%E6%94%B9python%E8%A7%A3%E9%87%8A%E5%99%A8-2020-12-21-13-14-41.webp"></p><h2 id="更改全局设置"><a href="#更改全局设置" class="headerlink" title="更改全局设置"></a>更改全局设置</h2><p>打开设置：点击左下角小齿轮–&gt;设置–&gt;右上角切换为 json 格式</p><p>将<code>&quot;code-runner.runInTerminal&quot;</code>所对应的值改为<code>true</code>（没有的自行添加）<br>这一步是让 code-runner 在终端输出。</p><p>再将<code>&quot;code-runner.executorMap&quot;</code>中<code>python</code>的所对应的值改为<code>&quot;\&quot;$pythonPath\&quot; $fullFileName&quot;</code>（没有的自行添加），即使用 pythonPath 的值，所以当我们切换解释器的时候，code-runner 所用的解释器也会随之更换。加两个双引号是防止路径中含有空格导致出错。$fullFileName 就是我们当前 py 文件的路径，此时就大功告成了~</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>也就是说，最后设置多加了这两句话</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&quot;code-runner.runInTerminal&quot;: true,<br>&quot;code-runner.executorMap&quot;: &#123;<br>    &quot;python&quot;: &quot;\&quot;$pythonPath\&quot; $fullFileName&quot;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后我们在左下角选择不同版本的解释器后，code-runner 插件所使用的解释器也会同步变化了</p><h2 id="额外插一句"><a href="#额外插一句" class="headerlink" title="额外插一句"></a>额外插一句</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JSON">&quot;code-runner.fileDirectoryAsCwd&quot;: true,<br></code></pre></td></tr></table></figure><p>这个选项可以执行脚本的时候先进入文件所在的文件夹，我个人比较喜欢~</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://stella_l.gitee.io/technest/2020/01/06/Python/VS%20code%E4%B8%ADCode%20Runner%E6%8F%92%E4%BB%B6%E7%9A%84Python%E8%B7%AF%E5%BE%84%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95/">VS code 中 Code Runner 插件的 Python 路径配置方法 | TechNest</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <summary type="html">如何快速更改code-runner插件使用不同的python解释器</summary>
    
    
    
    
    <category term="VSCode" scheme="https://www.zhjue.xyz/tags/VSCode/"/>
    
    <category term="教程" scheme="https://www.zhjue.xyz/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Github+PicGO+JsDelivr实现图床</title>
    <link href="https://www.zhjue.xyz/posts/github-picgo-jsdeliver-imgbed/"/>
    <id>https://www.zhjue.xyz/posts/github-picgo-jsdeliver-imgbed/</id>
    <published>2020-11-10T10:19:23.000Z</published>
    <updated>2020-11-11T00:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li>看网上教程用 Hexo + GitHub pages 作为博客后，图床成了下一个问题，本着能白嫖就白嫖的精神，从网上搜了一下图床选择，最终选定为 Github 配合 Jsdelivr 的 CDN 加速</li></ul><h2 id="GitHub-仓库创建"><a href="#GitHub-仓库创建" class="headerlink" title="GitHub 仓库创建"></a>GitHub 仓库创建</h2><ul><li>首先你需要有一个 Github 账号，怎么注册就不用说了吧~</li><li>登陆 GitHub 后，点击右上角的 NEW 创建新的仓库</li></ul><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn@master/hexo-img/Github-PicGo-JsDelivr%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A-2020-12-21-11-38-57.webp"></p><p>之后进入到创建页面</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn@master/hexo-img/Github-PicGo-JsDelivr%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A-2020-12-21-11-39-14.webp"></p><p>在这个界面中：</p><p>① 处填写仓库的名称，自己认识就可以了；</p><p>② 处将仓库选为公开的；</p><p>③ 处选择添加一个 readme 占位(其他也可)；</p><p>④ 处，在 2020 年 10 月后，GitHub 将默认分支名称改为了 main，而不是原来的 master，这会导致之后的图片链接里要加上一个@main，想不想改看你心情~</p><h2 id="GitHub-账号-token-获取"><a href="#GitHub-账号-token-获取" class="headerlink" title="GitHub 账号 token 获取"></a>GitHub 账号 token 获取</h2><p>进入账号 setting 界面，选择 Developer settings，然后选择 Personal access tokens，点击生成一个新的 token</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn@master/hexo-img/Github-PicGo-JsDelivr%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A-2020-12-21-11-39-27.webp"></p><p>Note 处写一点对于这个 token 的描述，免得以后忘了是啥的</p><p>关于权限只选择 repo(仓库)就可以了</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn@master/hexo-img/Github-PicGo-JsDelivr%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A-2020-12-21-11-39-46.webp"></p><p><strong>生成成功的 token 建议复制到别的地方保存一下，你只能看到这个 token 一次！！！</strong></p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn@master/hexo-img/Github-PicGo-JsDelivr%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A-2020-12-21-11-40-04.webp"></p><h2 id="PicGO-配置"><a href="#PicGO-配置" class="headerlink" title="PicGO 配置"></a>PicGO 配置</h2><p>打开 PicGO，个人喜欢用 github-plus 这个插件而不是自带的 github 图床，因为这个插件可以同步删除操作</p><p><img src="https://cdn.jsdelivr.net/gh/zwy99/cdn@master/hexo-img/Github-PicGo-JsDelivr%E5%AE%9E%E7%8E%B0%E5%9B%BE%E5%BA%8A-2020-12-21-11-40-19.webp"></p><ul><li><p>repo 处填写你的 GitHub 用户名和刚才创建仓库名，格式为用户名/仓库名</p></li><li><p>branch 处填写你的分支名称，在 2020 年 10 月后，新建的仓库分支名默认为 main，具体填什么请自己去仓库看一眼名字！</p></li><li><p>token 处就是刚才生成的，只出现一次的 token</p></li><li><p>path 处填写你希望保存的路径，例如，你填写了：img/ 那么你上传的照片就会在 仓库/img/ 这个文件夹下</p></li><li><p>customUrl 这里可以填也可以不填，不填默认使用 github 地址，本文使用 Jsdelivr 进行加速，那么这里就要写一点东西了</p><p>注意，如果你的分支名称不是 master 而是别的名字比如 main，那么你的仓库名称后面应该加上@分支名，否则会不能正确访问</p></li></ul><p>即：</p><p>master 分支：<code>https://cdn.jsdelivr.net/gh/用户名/仓库名</code></p><p>其他分支：<code>https://cdn.jsdelivr.net/gh/用户名/仓库名@分支名</code></p><p>​</p><h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2><p>到此应该就没啥问题了- -速度应该也还是不错的~</p>]]></content>
    
    
    <summary type="html">使用github、jsdelivr、picgo打造方便的、全球加速的图床</summary>
    
    
    
    
    <category term="图床" scheme="https://www.zhjue.xyz/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
</feed>
